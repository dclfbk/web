{"version":3,"sources":["data/mapFunctions.js","components/treesColor.config.js","components/map.js","components/benefitGrid.js","data/cardFunctions.js","components/cardCitta.js","components/cardAlbero.js","components/cardCirc.js","components/cardPoli.js","components/cardPoligono.js","App.js","reportWebVitals.js","index.js"],"names":["async","fetchJson","url","fetch","json","processLabelsFeatures","geojson","coordinatesLabels","type","features","map","item","tempFeature","geometry","coordinates","properties","title","coord","p","polylabel","coordArray","undefined","nome","nome_quart","push","COLOR_TREES_CONFIG","hoveredCircoscrizioniId","hoveredPoliId","popUpIsOpen","Map","props","mapContainer","useRef","lng","useState","lat","API_KEY","zoom","minZoom","console","log","drawRemoved","isMobile","propCircoscrizioni","propPoliSociali","propTrees","propPredictions","useEffect","initializeMap","current","dataLabelsPoliSociali","dataLabelsCircoscrizioni","popup","maplibregl","Popup","closeButton","draw","MapboxDraw","displayControlsDefault","controls","polygon","trash","container","style","vectorTiles","sourceLayer","center","maxZoom","trackResize","attributionControl","getCanvas","cursor","on","e","addSource","data","generateId","addLayer","id","source","minzoom","paint","circle-color","circle-radius","circle-opacity","maxzoom","fill-color","fill-opacity","filter","line-color","line-opacity","line-width","layout","text-field","text-font","addControl","NavigationControl","AttributionControl","getZoom","setCardInfo","name","item_name","flyTo","preventDefault","item_info","Longitude","Latitude","getFullItemFromCircoscrizioni","bounds","turf","fitBounds","padding","layer","getFullItemFromPoloSociale","remove","setLngLat","setHTML","Name","addTo","tree","parseFloat","benefit","toFixed","length","setFeatureState","hover","removeControl","getAll","pids","lid","forEach","f","delete","shift","Math","random","React","createElement","ref","className","BenefitGrid","_props$totalInfo$Poll","_props$totalInfo$Poll2","_props$totalInfo$Gros","_props$totalInfo$Gros2","_props$totalInfo$Avoi","_props$totalInfo$Avoi2","_props$totalInfo$Poll3","_props$totalInfo$Poll4","format","num","String","replace","Grid","display","direction","justifyContent","alignItems","xs","Pulse","Typography","sx","fontSize","textAlign","fontWeight","CountUp","end","totalInfo","duration","suffix","color","Divider","orientation","flexItem","marginTop","position","left","top","flexDirection","AiFillCar","size","marginLeft","marginRight","FaCloudversify","GiRaining","searchURL","getTotalInfoFromTrees","trees","total","Replacement Value (eur)","Carbon Storage (kg)","Carbon Storage (eur)","Gross Carbon Sequestration (kg/yr)","Gross Carbon Sequestration (eur/yr)","Avoided Runoff (l/yr)","Avoided Runoff (eur/yr)","Pollution Removal (g/yr)","Pollution Removal (eur/yr)","Total Annual Benefits (eur/yr)","Oxygen Production (kg/yr)","Canopy Cover (m2)","Leaf Area (m2)","Leaf Biomass (kg)","key","isNaN","speciesFreq","freq","mostCommonSpecies","species","Object","keys","sort","a","b","slice","openWindow","window","open","activeLabel","split","join","CustomTooltip","importData","payload","newPayload","value","amount","DefaultTooltipContent","assign","composeChart","totalNum","speciesNum","max","Fragment","ResponsiveContainer","width","height","BarChart","margin","right","bottom","onClick","YAxis","dataKey","wrapperStyle","whiteSpace","XAxis","allowDecimals","Tooltip","content","Bar","fill","barSize","entry","index","Cell","fillOpacity","CardCitta","treesNum","setTreesNum","setFreq","commonSpecies","setcommonSpecies","grid","setGrid","benefitsCityGrid","setbenefitsCityGrid","chart","setChart","chartData","specie","parseInt","Box","minWidth","Card","variant","borderRadius","backgroundColor","CardContent","drawerOpen","BsFillArrowLeftSquareFill","setDrawerOpen","CardAlbero","_treesInfo$DBHCm","_treesInfo$CrownWidt","treesInfo","setTreesInfo","propTree","alignSelf","MdNaturePeople","AiOutlineColumnWidth","BsTreeFill","RiScalesFill","BiArea","SiOxygen","albero","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","createTheme","palette","mode","background","default","CardCirc","filterValue","setFilterValue","treesCirc","setTreesCirc","totalInfoTrees","setTotalInfoTrees","treesInCirc","circoscrizioni","area","pointsWithinPolygon","getTreesWithinCircoscrizione","includes","FormControl","m","InputLabel","Select","labelId","multiple","onChange","event","target","input","OutlinedInput","label","renderValue","selected","MenuItem","Checkbox","checked","indexOf","ListItemText","primary","CardPoli","treesPoli","setTreesPoli","polo","getTreesWithinPoloSociale","CardPoligono","treesPoligono","setTreesPoligono","treesInPoligono","coord_poligono","getTreesWithinPoligono","info_poligono","round","App","cardInfo","setData","swalProps","setSwalProps","setDrawer","location","href","fetchProps","then","pop","date","Date","now","finishDate","transform","CircleLoading","Drawer","anchor","zIndex","overflowY","boxSizing","& .MuiDrawer-paper","scrollBehavior","scrollbarWidth","boxShadow","info","BsFillArrowRightSquareFill","Button","show","didClose","startIcon","IoIosPeople","&:hover","SweetAlert2","Link","underline","AiFillGithub","MdEmail","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2dce3f18.chunk.js","sourcesContent":["import * as polylabel from \"polylabel\";\n\nasync function fetchJson(url){\n    const response = await fetch(url);\n    return response.json();\n};\n\nexport async function fetchProps() {\n    let propTrees = await fetchJson(window.location.href + \"/geo_data_trees.geojson\")\n    let propCircoscrizioni = await fetchJson(window.location.href + \"/circoscrizioni.json\")\n    let propPoliSociali = await fetchJson(window.location.href + \"/poli_sociali.json\")\n    let propPredictions = await fetchJson(window.location.href + \"/predict_trees.geojson\")\n    return [propTrees,propCircoscrizioni,propPoliSociali,propPredictions]\n}\n/* export async function fetchProps() {\n    console.log(\"Fetching props\");\n\n    // Check if data is already cached\n    const cachedData = getCachedData();\n    if (cachedData) {\n        return cachedData;\n    }\n\n    // If data is not cached, fetch and cache it\n    let propTrees = await fetchJson(window.location.href + \"/geo_data_trees.geojson\");\n    let propCircoscrizioni = await fetchJson(window.location.href + \"/circoscrizioni.json\");\n    let propPoliSociali = await fetchJson(window.location.href + \"/poli_sociali.json\");\n\n    // Cache the fetched data\n    cacheData([propTrees, propCircoscrizioni, propPoliSociali]);\n\n    return [propTrees, propCircoscrizioni, propPoliSociali];\n}\n\n// Function to cache data in localStorage\nfunction cacheData(data) {\n    const dataToCache = JSON.stringify(data);\n    localStorage.setItem('cachedData', dataToCache);\n}\n\n// Function to retrieve cached data from localStorage\nfunction getCachedData() {\n    const cachedData = localStorage.getItem('cachedData');\n    return cachedData ? JSON.parse(cachedData) : null;\n}\n\n */\n\n// calcolo il punto ottimale per mettere il testo contenente il nome del 'poligono'\n// il testo e' determinato dal campo 'nome' o 'nome_quart' a seconda di che geojson sta analizzando\nexport function processLabelsFeatures(geojson){\n    let coordinatesLabels = {\n        'type': 'FeatureCollection',\n        'features': []\n    }\n    geojson.features.map((item) => {\n        let tempFeature = {\n            'type': 'Feature',\n            'geometry': {\n                'type': 'Point',\n                'coordinates': []\n            },\n            'properties': {\n                'title': ''\n            }\n        }\n        let coord = item.geometry.coordinates;\n        //let p = polylabel(coord,0.2)\n        let p = polylabel(coord,0.0035)\n        //console.log(p)\n        let coordArray = [p[0],p[1]];\n        tempFeature.geometry.coordinates = coordArray\n        if(item.properties.nome !== undefined)\n            tempFeature.properties.title = item.properties.nome\n        else\n            tempFeature.properties.title = item.properties.nome_quart\n        coordinatesLabels.features.push(tempFeature)\n\n        return item\n    })\n    return coordinatesLabels\n    //propCircoscrizioni.features.filter(item => item.properties.nome == e.features[0].properties.nome)\n}\n\nexport function getFullItemFromCircoscrizioni(geojson,name){ \n    return geojson.features.filter(item => item.properties.nome === name)[0]\n}\n\nexport function getFullItemFromPoloSociale(geojson,name){ \n    return geojson.features.filter(item =>item.properties.nome_quart === name)[0]\n}","export const COLOR_TREES_CONFIG = [\n    'match',\n    ['get', 'Name'],\n    // Grouping species alphabetically with assigned shades of green\n    // pick a random color that is a shade of green\n    'Common fig', '#1a9850',\n    'Tamarisk spp', '#66bd63',\n    'Plum spp', '#a6d96a',\n    'Black locust', '#d9ef8b',\n    'Common plum', '#ffffbf',\n    'English walnut', '#196e07',\n    'European black elderberry', '#235721',\n    'Japanese persimmon', '#15f70c',\n    'Tree of heaven', '#27d77f',\n    'European turkey oak', '#216121',\n    'European filbert', '#1a9850',\n    'English oak', '#66bd63',\n    'Elm spp', '#a6d96a',\n    'White mulberry', '#d9ef8b',\n    'Black poplar', '#ffffbf',\n    'Populus canescens', '#196e07',\n    'Ash spp', '#235721',\n    'European ash', '#15f70c',\n    'White willow', '#27d77f',\n    'Sweet cherry', '#216121',\n    'European hackberry', '#1a9850',\n    'Flowering ash', '#66bd63',\n    'Hedge maple', '#a6d96a',\n    'European hornbeam', '#d9ef8b',\n    'Narrow-leafed ash', '#ffffbf',\n    'Hawthorn spp', '#196e07',\n    'Blackthorn', '#235721',\n    'European medlar', '#15f70c',\n    'Common pear', '#27d77f',\n    'Apple spp', '#216121',\n    'Black mulberry', '#1a9850',\n    'Japanese flowering cherry', '#66bd63',\n    'Japanese privet', '#a6d96a',\n    'Littleleaf linden', '#d9ef8b',\n    'Basswood spp', '#ffffbf',\n    'Norway maple', '#196e07',\n    'Necklacepod spp', '#235721',\n    'Arbol de judea', '#15f70c',\n    'Silver maple', '#27d77f',\n    'Boxelder', '#216121',\n    'Silver linden', '#1a9850',\n    'Norway spruce', '#66bd63',\n    'Horse chestnut', '#a6d96a',\n    'Sycamore spp', '#d9ef8b',\n    'White poplar', '#ffffbf',\n    'English yew', '#196e07',\n    'Deodar cedar', '#235721',\n    'Privet spp', '#15f70c',\n    'London planetree', '#27d77f',\n    'Oriental planetree', '#216121',\n    'Robinia spp', '#1a9850',\n    'Austrian pine', '#66bd63',\n    'Cottonwood spp', '#a6d96a',\n    'Eastern white pine', '#d9ef8b',\n    'Southern magnolia', '#ffffbf',\n    'Northern white cedar', '#196e07',\n    'Italian stone pine', '#235721',\n    'Nordmann fir', '#15f70c',\n    \"Maule's quince\", '#27d77f',\n    'Oleander', '#216121',\n    'Aloe yucca', '#1a9850',\n    'Black walnut', '#66bd63',\n    'Honeylocust', '#a6d96a',\n    'Hop hornbeam', '#d9ef8b',\n    'Oneseed hawthorn', '#ffffbf',\n    'Cypress spp', '#196e07',\n    'Blue atlas cedar', '#235721',\n    'Rose-of-sharon', '#15f70c',\n    'Holly oak', '#27d77f',\n    'Atlas cedar', '#216121',\n    'Italian cypress', '#1a9850',\n    'Goldenrain tree', '#66bd63',\n    'Hackberry spp', '#a6d96a',\n    'Bigleaf linden', '#d9ef8b',\n    'Osage orange', '#ffffbf',\n    'Maritime pine', '#196e07',\n    'Freeman maple', '#235721',\n    'Chinaberry', '#15f70c',\n    'Ginkgo', '#27d77f',\n    'Sterculia spp', '#216121',\n    'Sweetgum', '#1a9850',\n    'Baldcypress', '#66bd63',\n    'Chinese privet', '#a6d96a',\n    'Downy oak', '#d9ef8b',\n    'Northern red oak', '#ffffbf',\n    'Southern catalpa', '#196e07',\n    'Sugar maple', '#235721',\n    'Libocedrus spp', '#15f70c',\n    'Bay laurel', '#27d77f',\n    'Whitebeam', '#216121',\n    'Paper mulberry', '#1a9850',\n    'Cedar of lebanon', '#66bd63',\n    'Scots pine', '#a6d96a',\n    'Kentucky Coffee tree', '#d9ef8b',\n    'Sycamore maple', '#ffffbf',\n    'European aspen', '#196e07',\n    'Coast redwood', '#235721',\n    'Loquat tree', '#15f70c',\n    'American elm', '#27d77f',\n    'Common crapemyrtle', '#216121',\n    'Harlequin glorybower', '#1a9850',\n    'Olive', '#66bd63',\n    'Chinese Plum Yew', '#a6d96a',\n    'Red horsechestnut', '#d9ef8b',\n    'Cherry laurel', '#ffffbf',\n    'Bloodtwig dogwood', '#196e07',\n    'Smoke tree', '#235721',\n    'Saucer magnolia', '#15f70c',\n    'Red Cedar spp', '#27d77f',\n    'European beech', '#216121',\n    'European silver fir', '#1a9850',\n    'Eastern cottonwood', '#66bd63',\n    'Arizona cypress', '#a6d96a',\n    'Laurustinus', '#d9ef8b',\n    'California privet', '#ffffbf',\n    'Fraser photinia', '#196e07',\n    'European buckthorn', '#235721',\n    'Italian alder', '#15f70c',\n    'Mediterranean Medlar', '#27d77f',\n    'Cherry plum', '#216121',\n    'Basket willow', '#1a9850',\n    'Pomegranate', '#66bd63',\n    'Durmast oak', '#a6d96a',\n    'Apricot', '#d9ef8b',\n    'Common apple', '#ffffbf',\n    'Cedar spp', '#196e07',\n    'Pine spp', '#235721',\n    'Port orford cedar', '#15f70c',\n    'Persian silk tree', '#27d77f',\n    'Willow spp', '#216121',\n    'Glossy privet', '#1a9850',\n    'European white birch', '#66bd63',\n    'Golden Chain Tree spp', '#a6d96a',\n    'Windmill palm', '#d9ef8b',\n    'European alder', '#ffffbf',\n    'Royal paulownia', '#196e07',\n    'Mulberry spp', '#235721',\n    'Mediterranean fan palm', '#15f70c',\n    'Russian olive', '#27d77f',\n    'Peach', '#216121',\n    'Grey alder', '#1a9850',\n    'Strawberry tree', '#66bd63',\n    'Crimean linden', '#a6d96a',\n    'Montpelier Maple', '#d9ef8b',\n    'Turkish hazelnut', '#ffffbf',\n    'Common privet', '#196e07',\n    'Ugni spp', '#235721',\n    'Pecan', '#15f70c',\n    'European bird cherry', '#27d77f',\n    'Chestnut-leaved oak', '#216121',\n    'Tulip tree', '#1a9850',\n    'Japanese maple', '#66bd63',\n    'Pin oak', '#a6d96a',\n    'Purple blow maple', '#d9ef8b',\n    'Quince', '#ffffbf',\n    'Oak spp', '#196e07',\n    'Date Plum', '#235721',\n    'Willow-leaved Pear', '#15f70c',\n    'Higan cherry', '#27d77f',\n    'Devilwood spp', '#216121',\n    'Sour Cherry', '#1a9850',\n    'Sargent cherry', '#66bd63',\n    'Common chokecherry', '#a6d96a',\n    'Callery pear', '#d9ef8b',\n    'Pterocarya spp', '#ffffbf',\n    'Zelkova spp', '#196e07',\n    'Spanish fir', '#235721',\n    'Hungarian Oak', '#15f70c',\n    'White ash', '#27d77f',\n    'Black cherry', '#216121',\n    'Yew spp', '#1a9850',\n    'Common jujube', '#66bd63',\n    'Mahaleb Cherry', '#a6d96a',\n    'Elaeagnus willow', '#d9ef8b',\n    'Crack willow', '#ffffbf',\n    'Red maple', '#196e07',\n    \"Pere David's Maple\", '#235721',\n    'Paperbark maple', '#15f70c',\n    'Wild Service Tree', '#27d77f',\n    'Bastard service-tree', '#216121',\n    'Swedish Whitebeam', '#1a9850',\n    'Juneberry', '#66bd63',\n    'Dawn Redwood spp', '#a6d96a',\n    'Purple wisteria', '#d9ef8b',\n    'Showy forsythia', '#ffffbf',\n    'Italian Maple', '#196e07',\n    'Babylon weeping willow', '#235721',\n    'Sweet chestnut', '#15f70c',\n    'Western red cedar', '#27d77f',\n    'Bhutan pine', '#216121',\n    'European mountain ash', '#1a9850',\n    'Chinese redbud', '#66bd63',\n    'Maple spp', '#a6d96a',\n    'English holly', '#d9ef8b',\n    'Blue spruce', '#ffffbf',\n    'Fullmoon maple', '#196e07',\n    'Common lilac', '#235721',\n    'Photinia', '#15f70c',\n    'Firethorn spp', '#27d77f',\n    'European crabapple', '#216121',\n    'Service tree', '#1a9850',\n    'Chaste tree', '#66bd63',\n    'Cedar-of-Goa', '#a6d96a',\n    'Pear spp', '#d9ef8b',\n    'Monterey cypress', '#ffffbf',\n    'Bignonia spp', '#196e07',\n    'Japanese zelkova', '#235721',\n    'Paulownia spp', '#15f70c',\n    'Chastetree spp', '#27d77f',\n    'Cornelian cherry', '#216121',\n    'Cladrastis spp', '#1a9850',\n    'Actinidia spp', '#66bd63',\n    'Silver wattle', '#a6d96a',\n    'Kobushi Magnolia', '#d9ef8b',\n    'Serviceberry spp', '#ffffbf',\n    'Washingtonia spp', '#196e07',\n    'Japanese pittosporum', '#235721',\n    'Pomegranate spp', '#15f70c',\n    'Fan Palm spp', '#27d77f',\n    'Staghorn sumac', '#216121',\n    'Gage plum', '#1a9850',\n    'Juniper spp', '#66bd63',\n    'Viburnum spp', '#a6d96a',\n    'French plantain', '#d9ef8b',\n    'Persian ironwood', '#ffffbf',\n    'Common box', '#196e07',\n    'Japanese allspice', '#235721',\n    'Italian Buckthorn', '#15f70c',\n    'Pride-of-rochester spp', '#27d77f',\n    'Mountain laurel', '#216121',\n    'Elaeagnus spp', '#1a9850',\n    'European cranberry bush', '#66bd63',\n    'American basswood', '#a6d96a',\n    'Sweetshrub spp', '#d9ef8b',\n    'Swiss mountain pine', '#ffffbf',\n    'Carolina poplar', '#196e07',\n    'green'\n]","import React, { useRef, useEffect, useState } from \"react\";\nimport maplibregl from \"maplibre-gl\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css'\nimport * as turf from \"turf\";\nimport \"./map.css\";\nimport { isMobile } from 'react-device-detect';\nimport {\n    processLabelsFeatures,\n    getFullItemFromCircoscrizioni,\n    getFullItemFromPoloSociale,\n} from \"../data/mapFunctions.js\"\n\nimport { COLOR_TREES_CONFIG } from \"../components/treesColor.config.js\"\n\nvar hoveredCircoscrizioniId = null;\nvar hoveredPoliId = null;\nvar popUpIsOpen = false;\n\n// const fetchJson = async (url) => {\n//     //console.log(\"Fetching trees json\")\n//     const response = await fetch(url);\n//     return response.json();\n// };\n\n// const fetchProps = async () => {\n//     console.log(\"Fetching props\")\n//     propTrees = await fetchJson(window.location.origin + \"/geo_data_trees.geojson\")\n//     propCircoscrizioni = await fetchJson(window.location.origin + \"/circoscrizioni.json\")\n//     propPoliSociali = await fetchJson(window.location.origin + \"/poli_sociali.json\")\n// }\n\nexport default function Map(props) {\n    const mapContainer = useRef(null);\n    const map = useRef(null);\n    const [lng] = useState(11.3426);\n    const [lat] = useState(44.4949);\n    const [API_KEY] = useState(\"trl1hRCUkVCSDvXlaqFz\");\n\n    console.log('props', props)\n\n    var zoom\n    var minZoom\n    var drawRemoved = 1\n\n    if (isMobile) {\n        zoom = 10.25;\n        minZoom = 9.5\n    } else {\n        zoom = 11;\n        minZoom = 9.5\n    }\n\n    const propCircoscrizioni = props.propCircoscrizioni;\n    const propPoliSociali = props.propPoliSociali\n    const propTrees = props.propTrees\n    const propPredictions = props.propPredictions\n\n    console.log('propTrees', propTrees)\n    console.log('propPredictions', propPredictions)\n\n    /* const initializeMap_1 = () => {\n        if (map.current) return;\n\n        map.current = new maplibregl.Map({\n            container: mapContainer.current,\n            style: `https://api.maptiler.com/maps/streets/style.json?key=${API_KEY}`,\n            vectorTiles: true,\n            sourceLayer: \"geo_data_trees\",\n            center: [lng, lat],\n            zoom: zoom,\n            maxZoom: 20,\n            trackResize: true,\n            minZoom: minZoom,\n            attributionControl: false\n        });\n\n        map.current.getCanvas().style.cursor = \"\";\n\n       \n\n        map.current.on(\"load\", function (e) {\n\n            map.current.addSource('some_1', {\n                type: 'vector',\n                url: 'https://api.maptiler.com/tiles/db07287c-d9d5-4301-bfec-13de112cf89a/tiles.json?key=889AkOUJC5WPzxdpH3zr'\n            });\n\n            map.current.addSource(\"Trees\", {\n                type: \"geojson\",\n                data: propTrees,\n                generateId: true\n            });\n\n            map.current.addLayer('TreesLayer',{\n                id: \"TreesLayer\",\n                type: \"circle\",\n                source: \"Trees\",\n                minzoom: 15.2,\n                paint: {\n                    \"circle-color\": 'green',\n                    \"circle-radius\": [\n                        \"interpolate\", [\"linear\"], [\"zoom\"],\n                        15.2, [\n                            'interpolate', ['linear'], [\"to-number\", ['get', 'DBH (cm)']],\n                            7, 1.5,\n                            90, 4.0,\n                        ],\n                        19.5, [\n                            'interpolate', ['linear'], [\"to-number\", ['get', 'DBH (cm)']],\n                            7, 10,\n                            90, 30,\n                        ],\n                    ],\n                    \"circle-opacity\": 0.6,\n                },\n            });\n\n            map.current.addLayer('PredictionsLayer',{\n                id: \"PredictionsLayer\",\n                type: \"circle\",\n                paint: {\n                    \"circle-color\": 'green',\n                    \"circle-radius\": [\n                        \"interpolate\", [\"linear\"], [\"zoom\"],\n                        15.2, [\n                            'interpolate', ['linear'], [\"to-number\", ['get', 'DBH (cm)']],\n                            7, 1.5,\n                            90, 4.0,\n                        ],\n                        19.5, [\n                            'interpolate', ['linear'], [\"to-number\", ['get', 'DBH (cm)']],\n                            7, 10,\n                            90, 30,\n                        ],\n                    ],\n                    \"circle-opacity\": 0.6,\n                },\n            });\n\n            map.current.addLayer({\n                id:'sourceLayer',\n                type:'fill',\n                source:'some_1',\n                'source-layer': 'contour',\n                //'source-layer':'PredictionsLayer',\n                paint:{\n                    'fill-color':'red',\n                    'fill-opacity':0.5\n                }\n            })\n\n        });\n\n    } */\n\n    const initializeMap = () => {\n        if (map.current) return;\n\n        var dataLabelsPoliSociali = processLabelsFeatures(propPoliSociali)\n        var dataLabelsCircoscrizioni = processLabelsFeatures(propCircoscrizioni)\n\n        const popup = new maplibregl.Popup({\n            closeButton: false,\n        });\n\n        var draw = new MapboxDraw({\n            displayControlsDefault: false,\n            controls: {\n                polygon: true,\n                trash: true\n            },\n        });\n\n        map.current = new maplibregl.Map({\n            container: mapContainer.current,\n            style: `https://api.maptiler.com/maps/streets/style.json?key=${API_KEY}`,\n            vectorTiles: true,\n            sourceLayer: \"geo_data_trees\",\n            center: [lng, lat],\n            zoom: zoom,\n            maxZoom: 20,\n            trackResize: true,\n            minZoom: minZoom,\n            attributionControl: false\n        });\n\n        map.current.getCanvas().style.cursor = \"\";\n\n        map.current.on(\"load\", function (e) {\n\n            map.current.addSource(\"Trees\", {\n                type: \"geojson\",\n                data: propTrees,\n                generateId: true\n            });\n\n            map.current.addSource(\"Predictions\", {\n                type: \"geojson\",\n                data: propPredictions,\n                generateId: true\n            });\n\n            //SOURCE per poli sociali\n            map.current.addSource(\"poli_sociali\", {\n                type: \"geojson\",\n                data: propPoliSociali,\n                generateId: true\n            });\n            //SOURCE per circoscrizioni\n            map.current.addSource(\"circoscrizioni\", {\n                type: \"geojson\",\n                //'data': window.location.origin + '/circoscrizioni.json',\n                data: propCircoscrizioni,\n                generateId: true\n            });\n\n            //SOURCES per i lables di entrambi i poli sociali e le circoscrizioni\n            map.current.addSource(\"polyLabelsCircoscrizioni\", {\n                type: 'geojson',\n                data: dataLabelsCircoscrizioni,\n                generateId: true\n            })\n            map.current.addSource(\"polyLabelsPoliSociali\", {\n                type: 'geojson',\n                data: dataLabelsPoliSociali,\n                generateId: true\n            })\n\n            //TODO : special color for each species\n            /* let speciesColor = [\n                'match',\n                ['get', 'Name'],\n                'White',\n                '#fbb03b',\n                'Black',\n                '#223b53',\n                'Hispanic',\n                '#e55e5e',\n                'Asian',\n                '#3bb2d0',\n                '#ccc'\n            ] */\n\n            map.current.addLayer({\n                id: \"TreesLayer\",\n                type: \"circle\",\n                source: \"Trees\",\n                minzoom: 15.2,\n                paint: {\n                    // we want to color the tree based on the species (Name)\n                    \"circle-color\": COLOR_TREES_CONFIG,\n                    /* \"circle-color\": [\n                        ['get', 'Name']\n                    ], // 'green' */\n                    \"circle-radius\": [\n                        \"interpolate\", [\"linear\"], [\"zoom\"],\n                        15.2, [\n                            'interpolate', ['linear'], [\"to-number\", ['get', 'DBH (cm)']],\n                            7, 1.5,\n                            90, 4.0,\n                        ],\n                        19.5, [\n                            'interpolate', ['linear'], [\"to-number\", ['get', 'DBH (cm)']],\n                            7, 10,\n                            90, 30,\n                        ],\n                    ],\n                    \"circle-opacity\": 0.6,\n                },\n            });\n\n            map.current.addLayer({\n                id: \"PredictionsLayer\",\n                type: \"circle\",\n                source: \"Predictions\",\n                paint: {\n                    \"circle-color\": 'red',\n                    \"circle-radius\": 7,\n                    \"circle-opacity\": 0.6,\n                },\n            });\n\n            map.current.addLayer({\n                id: \"poli_socialiLayer\",\n                type: \"fill\",\n                source: \"poli_sociali\",\n                minzoom: 12.2,\n                maxzoom: 15.1999999,\n                paint: {\n                    \"fill-color\": \"#1fa141\",\n                    'fill-opacity': [\n                        \"interpolate\", [\"linear\"], [\"to-number\", ['get', 'trees_within']],\n                        0, ['case',\n                            ['boolean', ['feature-state', 'hover'], false], // Set this to false\n                            0.25,\n                            0.15,\n                        ],\n                        1750, ['case',\n                            ['boolean', ['feature-state', 'hover'], false], // Set this to false\n                            0.85,\n                            0.75,\n                        ],\n                    ],\n                },\n                filter: ['==', '$type', 'Polygon']\n            });\n            map.current.addLayer({\n                id: \"circoscrizioniLayer\",\n                type: \"fill\",\n                source: \"circoscrizioni\",\n                minzoom: 8,\n                maxzoom: 12.19999999,\n                paint: {\n                    \"fill-color\": \"#1fa141\",\n                    'fill-opacity': [\n                        \"interpolate\", [\"linear\"], [\"to-number\", ['get', 'trees_within']],\n                        100, ['case',\n                            ['boolean', ['feature-state', 'hover'], false], // Set this to false\n                            0.25,\n                            0.15,\n                        ],\n                        4000, ['case',\n                            ['boolean', ['feature-state', 'hover'], false], // Set this to false\n                            0.85,\n                            0.75,\n                        ],\n                    ],\n                },\n                filter: ['==', '$type', 'Polygon']\n            });\n\n            map.current.addLayer({\n                id: \"poli_socialiLine\",\n                type: \"line\",\n                source: \"poli_sociali\",\n                minzoom: 12.2,\n                maxzoom: 21,\n                'paint': {\n                    'line-color': '#1fa141',\n                    'line-opacity': 0.7,\n                    'line-width': [\"interpolate\", [\"linear\"], [\"zoom\"],\n                        // zoom is 5 (or less) -> circle radius will be 1px\n                        12.2, 1,\n                        // zoom is 10 (or greater) -> circle radius will be 5px\n                        20, 5\n                    ]\n                }\n            });\n            map.current.addLayer({\n                id: \"circoscrizioniLine\",\n                type: \"line\",\n                source: \"circoscrizioni\",\n                minzoom: 8,\n                maxzoom: 15.1999999,\n                'paint': {\n                    'line-color': '#1fa141',\n                    'line-opacity': 0.88,\n                    'line-width': [\"interpolate\", [\"linear\"], [\"zoom\"],\n                        // zoom is 5 (or less) -> circle radius will be 1px\n                        11, 1,\n                        // zoom is 10 (or greater) -> circle radius will be 5px\n                        12.19999999, 2.75\n                    ]\n                }\n            });\n\n            map.current.addLayer({\n                'id': 'lablesCircoscrizioni',\n                'type': 'symbol',\n                'source': 'polyLabelsCircoscrizioni',\n                minzoom: 9.9,\n                maxzoom: 12.19999999,\n                'layout': {\n                    // get the title name from the source's \"title\" property\n                    'text-field': ['get', 'title'],\n                    'text-font': [\n                        'Open Sans Semibold',\n                        'Arial Unicode MS Bold'\n                    ],\n                }\n            });\n            map.current.addLayer({\n                'id': 'lablesPoliSociali',\n                'type': 'symbol',\n                'source': 'polyLabelsPoliSociali',\n                minzoom: 12.2,\n                maxzoom: 21,\n                'layout': {\n                    // get the title name from the source's \"title\" property\n                    'text-field': ['get', 'title'],\n                    'text-font': [\n                        'Open Sans Semibold',\n                        'Arial Unicode MS Bold'\n                    ],\n                }\n            });\n\n            map.current.addControl(\n                new maplibregl.NavigationControl(),\n                \"top-right\"\n            );\n\n            map.current.addControl(new maplibregl.AttributionControl(), 'bottom-left');\n            //map.current.addControl(draw, \"top-right\")\n        });\n\n        map.current.on(\"click\", (e) => {\n            if (map.current.getZoom() < 15.1999999) {\n                map.current.getCanvas().style.cursor = \"\";\n                props.setCardInfo({\n                    name: \"citta\",\n                    item_name: null\n                })\n                map.current.flyTo({\n                    center: [lng, lat],\n                    zoom: zoom\n                })\n            }\n        });\n\n        map.current.on(\"click\", \"TreesLayer\", (e) => {\n            e.preventDefault();\n            map.current.getCanvas().style.cursor = \"\";\n            props.setCardInfo({\n                name: 'albero',\n                item_info: e.features[0].properties\n            })\n            map.current.flyTo({\n                center: [e.features[0].properties.Longitude, e.features[0].properties.Latitude],\n            })\n        });\n\n        // ZOOM sulla circoscrizione una volta cliccata.\n        map.current.on(\"click\", \"circoscrizioniLayer\", (e) => {\n            e.preventDefault();\n            map.current.getCanvas().style.cursor = \"\";\n            props.setCardInfo({\n                name: \"circoscrizioni\",\n                item_name: e.features[0].properties.nome\n            })\n            let name = e.features[0].properties.nome;\n            // Dobbiamo chiamare la funzione per averer l' item con le coordinate. Il dato 'e' ritornato dal layer della mappa non ha questa informazione.\n            let item = getFullItemFromCircoscrizioni(propCircoscrizioni, name)\n            // Necessita di un file geoJson come input. Nel nostro caso Item va bene. Ritorna i bounds del poligono\n            let bounds = turf.bbox(item)\n            map.current.fitBounds(bounds, {\n                padding: 20\n            });\n        });\n\n        map.current.on(\"click\", \"poli_socialiLayer\", (e) => {\n            if (map.current.getZoom() <= e.features[0].layer.maxzoom) {\n                e.preventDefault();\n                map.current.getCanvas().style.cursor = \"\";\n                props.setCardInfo({\n                    name: \"poli\",\n                    item_name: e.features[0].properties.nome_quart\n                })\n                let name = e.features[0].properties.nome_quart;\n                //console.log(e.features[0].properties)\n                // Dobbiamo chiamare la funzione per averer l' item con le coordinate. Il dato 'e' ritornato dal layer della mappa non ha questa informazione.\n                let item = getFullItemFromPoloSociale(propPoliSociali, name)\n                // Necessita di un file geoJson come input. Nel nostro caso Item va bene. Ritorna i bounds del poligono\n                let bounds = turf.bbox(item)\n                map.current.fitBounds(bounds, {\n                    padding: 20\n                });\n            }\n        });\n\n        map.current.on(\"mousemove\", \"TreesLayer\", (e) => {\n            e.preventDefault();\n            map.current.getCanvas().style.cursor = \"pointer\";\n            // Populate the popup and set its coordinates based on the feature.\n            let features = e.features[0];\n            //console.log(e.features[0])\n            if (popUpIsOpen) {\n                try {\n                    popup.remove()\n                } catch (e) {\n                    console.log('Error closing popup')\n                }\n            }\n\n            popUpIsOpen = true\n            popup.setLngLat(features.geometry.coordinates).setHTML(\n                \"<div>\" +\n                '<b>' + features.properties.Name + '</b>' +\n                \"<br/>\" +\n                '<p>Tree ID: ' + features.properties['Tree ID'] + '</p>' +\n                \"</div>\"\n            ).addTo(map.current);\n\n        });\n\n        map.current.on(\"mouseover\", \"PredictionsLayer\", (e) => {\n            // Get the current zoom level\n            let zoom = map.current.getZoom();\n\n            // Check if the zoom level is greater than or equal to your desired zoom level\n            if (zoom >= 15.2) {\n                e.preventDefault();\n                map.current.getCanvas().style.cursor = \"pointer\";\n                // Populate the popup and set its coordinates based on the feature.\n                let features = e.features[0];\n                //console.log(e.features[0])\n                if (popUpIsOpen) {\n                    try {\n                        popup.remove()\n                    } catch (e) {\n                        console.log('Error closing popup')\n                    }\n                }\n\n                popUpIsOpen = true\n                popup.setLngLat(features.geometry.coordinates).setHTML(\n                    \"<div>\" +\n                    '<p><b>Species:</b> ' + features.properties.tree + '</p>' +\n                    \"</div>\" + \n                    \"<div>\" +\n                    '<p><b>Predicted benefit:</b> ' + parseFloat(features.properties.benefit).toFixed(2) + '€</p>' +\n                    \"</div>\" \n                ).addTo(map.current);\n            }\n        });\n\n        map.current.on(\"mouseleave\", \"TreesLayer\", (e) => {\n            e.preventDefault();\n            map.current.getCanvas().style.cursor = \"\";\n            if (popUpIsOpen) {\n                try {\n                    popup.remove()\n                } catch (e) {\n                    console.log('Error closing popup')\n                }\n            }\n        });\n\n        map.current.on(\"mousemove\", \"circoscrizioniLayer\", (e) => {\n            e.preventDefault();\n            map.current.getCanvas().style.cursor = \"pointer\";\n            if (e.features.length > 0) {\n                if (hoveredCircoscrizioniId !== null) {\n                    map.current.setFeatureState(\n                        { source: \"circoscrizioni\", id: hoveredCircoscrizioniId },\n                        { hover: false }\n                    );\n                }\n                hoveredCircoscrizioniId = e.features[0].id;\n                map.current.setFeatureState(\n                    { source: \"circoscrizioni\", id: hoveredCircoscrizioniId },\n                    { hover: true }\n                );\n            }\n        });\n\n        map.current.on('mouseleave', 'circoscrizioniLayer', (e) => {\n            e.preventDefault();\n            map.current.getCanvas().style.cursor = \"\";\n            if (hoveredCircoscrizioniId !== null) {\n                map.current.setFeatureState(\n                    { source: 'circoscrizioni', id: hoveredCircoscrizioniId },\n                    { hover: false }\n                );\n            }\n            hoveredCircoscrizioniId = null;\n        });\n\n        map.current.on(\"mousemove\", \"poli_socialiLayer\", (e) => {\n            e.preventDefault();\n            if (e.features.length > 0) {\n                map.current.getCanvas().style.cursor = \"pointer\";\n                if (hoveredPoliId !== null) {\n                    map.current.setFeatureState(\n                        { source: \"poli_sociali\", id: hoveredPoliId },\n                        { hover: false }\n                    );\n                }\n                hoveredPoliId = e.features[0].id;\n                map.current.setFeatureState(\n                    { source: \"poli_sociali\", id: hoveredPoliId },\n                    { hover: true }\n                );\n            } else {\n                map.current.getCanvas().style.cursor = \"\";\n            }\n        });\n\n        map.current.on('mouseleave', 'poli_socialiLayer', (e) => {\n            e.preventDefault();\n            map.current.getCanvas().style.cursor = \"\";\n            if (hoveredPoliId !== null) {\n                map.current.setFeatureState(\n                    { source: 'poli_sociali', id: hoveredPoliId },\n                    { hover: false }\n                );\n            }\n            hoveredPoliId = null;\n        });\n\n        map.current.on(\"zoom\", () => {\n            if (drawRemoved === 1 && map.current.getZoom() > 15.199999) {\n                drawRemoved = 0\n                map.current.addControl(draw, \"top-right\")\n            } else if (drawRemoved === 0 && map.current.getZoom() <= 15.199999) {\n                drawRemoved = 1\n                map.current.removeControl(draw)\n            }\n        });\n\n        map.current.on('draw.create', (e) => {\n            var data = draw.getAll()\n\n            var pids = []\n            const lid = data.features[data.features.length - 1].id\n            data.features.forEach((f) => {\n                if (f.geometry.type === 'Polygon' && f.id !== lid) {\n                    pids.push(f.id)\n                }\n            })\n            draw.delete(pids)\n\n            if (data.features.length > 1)\n                data.features.shift()\n\n            props.setCardInfo({\n                name: \"\"\n            })\n            props.setCardInfo({\n                name: \"poligono\",\n                item_name: Math.random(),\n                item_info: data\n            })\n        });\n        map.current.on('draw.delete', (e) => {\n            props.setCardInfo({\n                name: \"citta\",\n            })\n        });\n\n        //getData().then(data => {console.log(data)}); //TODO: implement fetch from external server\n    };\n\n    useEffect(() => {\n        initializeMap();\n    }, []);\n\n    return (\n        <div ref={mapContainer} className=\"map\" />\n    );\n}\n","import React , { useRef, useEffect, useState } from 'react';\nimport '../App.css';\nimport Pulse from 'react-reveal/Pulse';\nimport CountUp from 'react-countup';\n\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\n\nimport Grid from '@mui/material/Grid';\n\nimport {FaCloudversify} from 'react-icons/fa'\nimport {GiRaining} from 'react-icons/gi'\nimport {AiFillCar} from 'react-icons/ai'\n\nexport default function BenefitGrid(props) {\n    const format = num => String(num).replace(/(?<!\\..*)(\\d)(?=(?:\\d{3})+(?:\\.|$))/g, '$1,')\n\n    return (\n        <Grid\n            container\n            display='flex'\n            direction=\"column\"\n            justifyContent=\"flex-start\"\n            alignItems=\"center\"\n        >\n            <Grid item xs='auto'>\n                <Pulse>\n                    <Typography sx={{ fontSize: 25, textAlign : 'center', fontWeight: 'bold'}}>\n                        <CountUp\n                            end={props.totalInfo['Total Annual Benefits (eur/yr)']}\n                            duration={1}\n                            suffix=\"€\"\n                        />\n                    </Typography>\n                </Pulse>\n                <Typography sx={{textAlign : 'center', fontSize: 15 }} color=\"text.secondary\">\n                    saved in a <b>year</b>\n                </Typography>\n            </Grid>\n            <Divider orientation=\"horizontal\" flexItem/>\n            <Grid item>\n                <Typography sx={{textAlign : 'center', fontSize: 15 }} color=\"text.secondary\">\n                    Derived from\n                </Typography>\n            </Grid>\n            <Grid item sx={{marginTop : 2}}>\n                <Grid\n                    container\n                    display='flex'\n                    direction=\"row\"\n                    justifyContent=\"center\"\n                    alignItems=\"stretch\"\n                >\n                    <Grid item >\n                        <div style={{\n                            position: \"relative\",\n                            left: 0,\n                            top: 0,\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                        }}>\n                            <AiFillCar size={30}/>\n                            <Typography sx={{textAlign : 'center', fontSize: 14}} color=\"text.secondary\">\n                                Pollution removed\n                            </Typography>\n                            <Typography sx={{textAlign : 'center', fontSize: 17, fontWeight: \"bold\"}} color=\"text.secondary\">\n                                {format((props.totalInfo['Pollution Removal (g/yr)'])?.toFixed(2)) + ' g'}\n                            </Typography>\n                            <Typography sx={{textAlign : 'center', fontSize: 14}} color=\"text.secondary\">\n                                {format(props.totalInfo['Pollution Removal (eur/yr)']?.toFixed(2)) + '€'}\n                            </Typography>\n                        </div>\n                    </Grid>\n                    <Divider orientation=\"vertical\" flexItem sx={{marginLeft : 1, marginRight : 1}}/>\n                    <Grid item >\n                        <div style={{\n                            position: \"relative\",\n                            left: 0,\n                            top: 0,\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                        }}>\n                            <FaCloudversify size={30}/>\n                            <Typography sx={{textAlign : 'center', fontSize: 14}} color=\"text.secondary\">\n                                Absorbed CO2\n                            </Typography>\n                            <Typography sx={{textAlign : 'center', fontSize: 17, fontWeight: \"bold\"}} color=\"text.secondary\">\n                                {format(props.totalInfo['Gross Carbon Sequestration (kg/yr)']?.toFixed(2)) + ' kg'}\n                            </Typography>\n                            <Typography sx={{textAlign : 'center', fontSize: 14}} color=\"text.secondary\">\n                                {format(props.totalInfo['Gross Carbon Sequestration (eur/yr)']?.toFixed(2)) + '€'}\n                            </Typography>\n                        </div>\n                    </Grid>\n                    <Divider orientation=\"vertical\" flexItem sx={{marginLeft : 1, marginRight : 1}}/>\n                    <Grid item >\n                        <div style={{\n                            position: \"relative\",\n                            left: 0,\n                            top: 0,\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                        }}>\n                            <GiRaining size={30}/>\n                            <Typography sx={{textAlign : 'center', fontSize: 14}} color=\"text.secondary\">\n                                Absorbed water\n                            </Typography>\n                            <Typography sx={{textAlign : 'center', fontSize: 17, fontWeight: \"bold\"}} color=\"text.secondary\">\n                                {format((props.totalInfo['Avoided Runoff (l/yr)'])?.toFixed(2)) + ' l'}\n                            </Typography>\n                            <Typography sx={{textAlign : 'center', fontSize: 14}} color=\"text.secondary\">\n                                {format(props.totalInfo['Avoided Runoff (eur/yr)']?.toFixed(2)) + '€'}\n                            </Typography>\n                        </div>\n                    </Grid>\n                </Grid>\n            </Grid>\n            {props.name && \n                <Grid item sx={{marginTop : 2}}>\n                    <Grid\n                        container\n                        display='flex'\n                        direction=\"row\"\n                        justifyContent=\"center\"\n                        alignItems=\"stretch\"\n                    >\n                        <Grid item >\n                            <div style={{\n                                position: \"relative\",\n                                left: 0,\n                                top: 0,\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                            }}>\n                                <FaCloudversify size={30}/>\n                                <Typography sx={{textAlign : 'center', fontSize: 14}} color=\"text.secondary\">\n                                    Pollution removed\n                                </Typography>\n                                <Typography sx={{textAlign : 'center', fontSize: 16, fontWeight: \"bold\"}} color=\"text.secondary\">\n                                    {format((props.totalInfo['Pollution Removal (g/yr)'])?.toFixed(2)) + ' g'}\n                                </Typography>\n                                <Typography sx={{textAlign : 'center', fontSize: 14}} color=\"text.secondary\">\n                                    {format(props.totalInfo['Pollution Removal (eur/yr)']?.toFixed(2)) + '€'}\n                                </Typography>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            }        \n        </Grid>\n    )\n}","import React from \"react\";\nimport { BarChart, Bar, Cell, XAxis, YAxis, /* CartesianGrid, */ Tooltip, /* Legend, */ ResponsiveContainer } from 'recharts';\nimport pointsWithinPolygon from '@turf/points-within-polygon'\nimport { DefaultTooltipContent } from 'recharts/lib/component/DefaultTooltipContent';\nimport Typography from '@mui/material/Typography';\n\n\nconst searchURL = 'https://it.wikipedia.org/wiki/'\n\n//ritorna una featurecollection con tutti gli alberi all' interno del poligono che passiamo, con anche i dati del poligono stesso.\nexport function getTreesWithinCircoscrizione(trees, name, circoscrizioni) {\n    let area = circoscrizioni.features.filter(item => item.properties.nome === name)\n\n    return pointsWithinPolygon(trees, area[0])\n}\n\nexport function getTreesWithinPoloSociale(trees, name, polo) {\n    let area = polo.features.filter(item => item.properties.nome_quart === name)\n\n    //rimuovo l'ultimo element in quanto rappresenta il totale di tutti i dati degli alberi e non e' prettamente un punto.\n    //trees.features.pop()\n\n    return pointsWithinPolygon(trees, area[0])\n}\n\nexport function getTreesWithinPoligono(trees, coord_poligono) {\n    return pointsWithinPolygon(trees, coord_poligono)\n}\n\nexport function getTotalInfoFromTrees(trees) {\n    let total = {\n        \"Replacement Value (eur)\": 0.0,\n        \"Carbon Storage (kg)\": 0.0,\n        \"Carbon Storage (eur)\": 0.0,\n        \"Gross Carbon Sequestration (kg/yr)\": 0.0,\n        \"Gross Carbon Sequestration (eur/yr)\": 0.0,\n        \"Avoided Runoff (l/yr)\": 0.0,\n        \"Avoided Runoff (eur/yr)\": 0.0,\n        \"Pollution Removal (g/yr)\": 0.0,\n        \"Pollution Removal (eur/yr)\": 0.0,\n        \"Total Annual Benefits (eur/yr)\": 0.0,\n        \"Oxygen Production (kg/yr)\": 0.0,\n        \"Canopy Cover (m2)\": 0.0,\n        \"Leaf Area (m2)\": 0.0,\n        \"Leaf Biomass (kg)\": 0.0,\n    }\n    trees.map((item) => {\n        let key = 0\n        for (key in total) {\n            // print the ones that are Nan\n            if (!isNaN(parseFloat(item.properties[key]))) {\n                total[key] += parseFloat(item.properties[key])\n            }\n        }\n        return 0\n    })\n\n    return total\n}\n\nexport function speciesFreq(data) {\n    var freq = {};\n    data.map((e) => {\n        if (freq[e.properties.Name] === undefined) {\n            freq[e.properties.Name] = 1\n        } else {\n            freq[e.properties.Name] += 1\n        }\n        return 0\n    })\n    return freq;\n}\n\nexport function mostCommonSpecies(species) {\n    let sorted = Object.keys(species).sort((a, b) => species[b] - species[a]);\n    let sliced = sorted.slice(0, 5);\n    return sliced\n}\n\nexport function openWindow(e) {\n    window.open(searchURL + e.activeLabel.split(' ').join('_'))\n}\n\nconst CustomTooltip = importData => {\n    // payload[0] doesn't exist when tooltip isn't visible\n    if (importData?.payload[0] != null) {\n        // mutating props directly is against react's conventions\n        // so we create a new payload with the name and value fields set to what we want\n        const newPayload = [\n            {\n                value: importData.payload[0].payload.amount + ' di ' + importData.num,\n            },\n        ];\n        // we render the default, but with our overridden payload\n        return <DefaultTooltipContent {...importData} payload={newPayload} />;\n    }\n    // we just render the default\n    return <DefaultTooltipContent {...importData} />;\n};\n\nexport function composeChart(data, totalNum, speciesNum) {\n\n    let num = 0;\n    let max = 0\n    data.map((item) => {\n        num = num + item.amount\n        if (item.amount > max)\n            max = item.amount\n        return 0\n    })\n    return (\n        <React.Fragment>\n            <Typography sx={{ textAlign: 'center', fontSize: 18, fontWeight: 'bold' }} color=\"text.primary\">\n                Most common species\n            </Typography>\n            <ResponsiveContainer width='100%' height={235}>\n                <BarChart\n                    layout=\"vertical\"\n                    data={data}\n                    margin={{\n                        top: 3,\n                        right: 10,\n                        left: 35,\n                        bottom: 0\n                    }}\n                    onClick={openWindow}\n                >\n                    <YAxis type=\"category\" dataKey=\"name\" wrapperStyle={{ whiteSpace: \"break-spaces\" }} />\n                    <XAxis type=\"number\" allowDecimals={false} />\n                    <Tooltip content={<CustomTooltip num={totalNum} />} />\n                    <Bar dataKey=\"amount\" fill=\"#1fa141\" barSize={26}>\n                        {data.map((entry, index) => {\n                            return (\n                                <Cell cursor=\"pointer\" fillOpacity={\n                                    (entry.amount / max) > 0.2 ? (entry.amount / max) : 0.2\n                                } fill={'#82ca9d'} key={`cell-${index}`} />\n                            )\n                        })}\n                    </Bar>\n                </BarChart>\n            </ResponsiveContainer>\n            <Typography sx={{ textAlign: 'center', fontSize: 13 }} color=\"text.secondary\">\n                number of different species: <b>{speciesNum}</b>\n            </Typography>\n        </React.Fragment>\n    )\n}\n\n","import React, { useRef, useEffect, useState } from 'react';\nimport '../App.css';\nimport BenefitGrid from './benefitGrid'\nimport {\n    speciesFreq,\n    mostCommonSpecies,\n    composeChart\n} from '../data/cardFunctions'\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport { BsFillArrowLeftSquareFill } from 'react-icons/bs'\n\n\nexport default function CardCitta(props) {\n    var [treesNum, setTreesNum] = useState('')\n    var [freq, setFreq] = useState('')\n    var [commonSpecies, setcommonSpecies] = useState('')\n    var [grid, setGrid] = useState('')\n    var [benefitsCityGrid, setbenefitsCityGrid] = useState('')\n    var [chart, setChart] = useState('')\n\n    useEffect(() => {\n        if (treesNum == '' && freq == '' && commonSpecies == '') {\n            let freq = speciesFreq(props.propTrees.features)\n            let commonSpecies = mostCommonSpecies(freq)\n\n            let chartData = []\n\n            commonSpecies.map((specie) => {\n                chartData.push({\n                    name: specie,\n                    amount: parseInt(freq[specie])\n                })\n            })\n\n            setChart(composeChart(chartData, (((Object.keys(props.propTrees.features)).length) - 1), Object.keys(freq).length))\n\n            setTreesNum((Object.keys(props.propTrees.features)).length)\n            setFreq(freq)\n            setcommonSpecies(commonSpecies)\n\n            let key = 0\n            for (key in props.totalInfo) {\n                props.totalInfo[key] = parseFloat(props.totalInfo[key])\n            }\n\n            setbenefitsCityGrid(\n                <BenefitGrid totalInfo={props.totalInfo} />\n            )\n        }\n    }, [])\n\n    return (\n        // <ThemeProvider theme={theme}>\n        <Box sx={{ minWidth: 10 }} className=\"card\">\n            <Card variant=\"outlined\" sx={{ borderRadius: 5, backgroundColor: '#ffffffd0' }}>\n                <CardContent >\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justifyContent=\"flex-start\"\n                    >\n                        <Grid item xs='auto'>\n                            {props.drawerOpen ?\n                                <div style={{\n                                    position: \"relative\",\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    alignItems: \"center\",\n                                    justifyContent: \"center\",\n                                }}>\n                                    <BsFillArrowLeftSquareFill onClick={() => props.setDrawerOpen(false)} size={25} />\n                                </div> : null\n                            }\n                        </Grid>\n                        <Grid item xs='auto'>\n                            <Typography sx={{ fontSize: 25, textAlign: 'center', color: '#1fe54d', fontWeight: 'bold' }}>\n                                City of Bologna\n                            </Typography>\n                            <Typography sx={{ textAlign: 'center', fontSize: 15 }} color=\"text.secondary\">\n                                Total trees in management\n                            </Typography>\n                            <Typography sx={{ fontSize: 23, textAlign: 'center', fontWeight: 'bold' }}>\n                                {treesNum - 1}\n                            </Typography>\n                            <Typography sx={{ textAlign: 'center', fontSize: 15 }} color=\"red\">\n                                Predicted benefit for the city, gained by the new trees:\n                            </Typography>\n                            <Typography sx={{ textAlign: 'center', fontSize: 18, fontWeight: 'bold' }} color=\"red\">\n                                {/* TODO: make this dynamic */}\n                                69.83 €/year\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n            <Card variant=\"outlined\" sx={{ borderRadius: 5, backgroundColor: '#ffffffd0', marginTop: 1 }}>\n                <CardContent >\n                    {benefitsCityGrid}\n                </CardContent>\n            </Card>\n            <Card variant=\"outlined\" sx={{ borderRadius: 5, backgroundColor: '#ffffffd0', marginTop: 1 }}>\n                <CardContent >\n                    {chart}\n                </CardContent>\n            </Card>\n        </Box>\n        // </ThemeProvider>\n    );\n}","import { useRef, useEffect, useState } from 'react';\nimport * as React from 'react';\nimport Link from '@mui/material/Link';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Divider from '@mui/material/Divider';\nimport BenefitGrid from './benefitGrid'\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport { BsFillArrowLeftSquareFill } from 'react-icons/bs'\nimport { BsTreeFill } from 'react-icons/bs'\nimport { MdNaturePeople } from 'react-icons/md'\nimport { AiOutlineColumnWidth } from 'react-icons/ai'\nimport { GiThreeLeaves } from 'react-icons/gi'\nimport { BiArea } from 'react-icons/bi'\nimport { SiOxygen } from 'react-icons/si'\nimport { RiScalesFill } from 'react-icons/ri'\nimport '../App.css';\n\nconst searchURL = 'https://it.wikipedia.org/wiki/'\n\nexport default function CardAlbero(props) {\n    const format = num => String(num).replace(/(?<!\\..*)(\\d)(?=(?:\\d{3})+(?:\\.|$))/g, '$1,')\n\n    var [treesInfo, setTreesInfo] = useState(null)\n\n    useEffect(() => {\n        let key = 0\n        for (key in props.propTree) {\n            if (parseFloat(props.propTree[key]))\n                props.propTree[key] = parseFloat(props.propTree[key])\n        }\n        setTreesInfo(props.propTree)\n    }, [props.propTree])\n\n    if (treesInfo != null)\n        return (\n            <Box sx={{ minWidth: 10 }} className=\"card\">\n                <Card variant=\"outlined\" sx={{ borderRadius: 5, backgroundColor: '#ffffffd0' }}>\n                    <CardContent >\n                        <Grid\n                            container\n                            direction=\"column\"\n                            justifyContent=\"flex-start\"\n                            alignSelf=\"center\"\n                        >\n                            <Grid item xs='auto'>\n                                {props.drawerOpen ?\n                                    <div style={{\n                                        position: \"relative\",\n                                        display: \"flex\",\n                                        flexDirection: \"column\",\n                                        alignItems: \"center\",\n                                        justifyContent: \"center\",\n                                    }}>\n                                        <BsFillArrowLeftSquareFill onClick={() => props.setDrawerOpen(false)} size={25} />\n                                    </div> : null\n                                }\n                            </Grid>\n                            <Grid item xs='auto'>\n                                <Typography sx={{ textAlign: 'center', fontSize: 17 }} color=\"text.secondary\">\n                                    Tree\n                                </Typography>\n                                <Typography sx={{ fontSize: 25, textAlign: 'center', fontWeight: 'bold' }}>\n                                    {treesInfo.Name}\n                                    {/* <Link target=\"_blank\" href={searchURL + treesInfo.Name.split(' ').join('_')} sx={{color: '#1fe54d'}} underline=\"hover\">\n                                        {treesInfo.Name}\n                                    </Link> */}\n                                </Typography>\n                                <Typography sx={{ textAlign: 'center', fontSize: 15 }} color=\"text.secondary\">\n                                    ID : {treesInfo['Tree ID']}\n                                </Typography>\n                            </Grid>\n                            <Grid item sx={{ marginTop: 2 }}>\n                                <Grid\n                                    container\n                                    display='flex'\n                                    direction=\"row\"\n                                    justifyContent=\"center\"\n                                    alignItems=\"center\"\n                                >\n                                    <Grid item >\n                                        <div style={{\n                                            position: \"relative\",\n                                            left: 0,\n                                            top: 0,\n                                            display: \"flex\",\n                                            flexDirection: \"column\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                        }}>\n                                            <MdNaturePeople size={25} />\n                                            <Typography sx={{ textAlign: 'center', fontSize: 14 }} color=\"text.secondary\">\n                                                Height\n                                            </Typography>\n                                            <Typography sx={{ textAlign: 'center', fontSize: 16, fontWeight: \"bold\" }} color=\"text.secondary\">\n                                                {treesInfo['Height (m)'] + ' m'}\n                                            </Typography>\n                                        </div>\n                                    </Grid>\n                                    <Divider orientation=\"vertical\" flexItem sx={{ marginLeft: 1, marginRight: 1 }} />\n                                    <Grid item >\n                                        <div style={{\n                                            position: \"relative\",\n                                            left: 0,\n                                            top: 0,\n                                            display: \"flex\",\n                                            flexDirection: \"column\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                        }}>\n                                            <AiOutlineColumnWidth size={25} />\n                                            <Typography sx={{ textAlign: 'center', fontSize: 14 }} color=\"text.secondary\">\n                                                Trunk diameter\n                                            </Typography>\n                                            <Typography sx={{ textAlign: 'center', fontSize: 16, fontWeight: \"bold\" }} color=\"text.secondary\">\n                                                {format(treesInfo['DBH (cm)']?.toFixed(2)) + ' cm'}\n                                            </Typography>\n                                        </div>\n                                    </Grid>\n                                    <Divider orientation=\"vertical\" flexItem sx={{ marginLeft: 1, marginRight: 1 }} />\n                                    <Grid item >\n                                        <div style={{\n                                            position: \"relative\",\n                                            left: 0,\n                                            top: 0,\n                                            display: \"flex\",\n                                            flexDirection: \"column\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                        }}>\n                                            <BsTreeFill size={25} />\n                                            <Typography sx={{ textAlign: 'center', fontSize: 14 }} color=\"text.secondary\">\n                                                Crown diameter\n                                            </Typography>\n                                            <Typography sx={{ textAlign: 'center', fontSize: 16, fontWeight: \"bold\" }} color=\"text.secondary\">\n                                            {format(treesInfo['Crown Width (m)']?.toFixed(2)) + ' m'}\n                                            </Typography>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid item sx={{ marginTop: 2 }}>\n                                <Grid\n                                    container\n                                    display='flex'\n                                    direction=\"row\"\n                                    justifyContent=\"center\"\n                                    alignItems=\"stretch\"\n                                >\n                                    <Grid item >\n                                        <div style={{\n                                            position: \"relative\",\n                                            left: 0,\n                                            top: 0,\n                                            display: \"flex\",\n                                            flexDirection: \"column\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                        }}>\n                                            <RiScalesFill size={25} />\n                                            <Typography sx={{ textAlign: 'center', fontSize: 14 }} color=\"text.secondary\">\n                                                Leaf weight\n                                            </Typography>\n                                            <Typography sx={{ textAlign: 'center', fontSize: 16, fontWeight: \"bold\" }} color=\"text.secondary\">\n                                                {treesInfo['Leaf Biomass (kg)'] + ' kg'}\n                                            </Typography>\n                                        </div>\n                                    </Grid>\n                                    <Divider orientation=\"vertical\" flexItem sx={{ marginLeft: 1, marginRight: 1 }} />\n                                    <Grid item >\n                                        <div style={{\n                                            position: \"relative\",\n                                            left: 0,\n                                            top: 0,\n                                            display: \"flex\",\n                                            flexDirection: \"column\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                        }}>\n                                            <BiArea size={25} />\n                                            <Typography sx={{ textAlign: 'center', fontSize: 14 }} color=\"text.secondary\">\n                                                Leaf area\n                                            </Typography>\n                                            <Typography sx={{ textAlign: 'center', fontSize: 16, fontWeight: \"bold\" }} color=\"text.secondary\">\n                                                {treesInfo['Leaf Area (m2)'] + ' m²'}\n                                            </Typography>\n                                        </div>\n                                    </Grid>\n                                    <Divider orientation=\"vertical\" flexItem sx={{ marginLeft: 1, marginRight: 1 }} />\n                                    <Grid item >\n                                        <div style={{\n                                            position: \"relative\",\n                                            left: 0,\n                                            top: 0,\n                                            display: \"flex\",\n                                            flexDirection: \"column\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"center\",\n                                        }}>\n                                            <SiOxygen size={25} />\n                                            <Typography sx={{ textAlign: 'center', fontSize: 14 }} color=\"text.secondary\">\n                                                Oxygen production\n                                            </Typography>\n                                            <Typography sx={{ textAlign: 'center', fontSize: 16, fontWeight: \"bold\" }} color=\"text.secondary\">\n                                                {treesInfo['Oxygen Production (kg/yr)'] + ' kg/anno'}\n                                            </Typography>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </Card>\n                <Card variant=\"outlined\" sx={{ borderRadius: 5, backgroundColor: '#ffffffd0', marginTop: 1 }}>\n                    <CardContent >\n                        <BenefitGrid totalInfo={treesInfo} albero={1} />\n                    </CardContent>\n                </Card>\n            </Box>\n        );\n    else return (<div></div>)\n}","import { useRef, useEffect, useState } from 'react';\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport '../App.css';\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport Grid from '@mui/material/Grid';\nimport {\n    getTreesWithinCircoscrizione,\n    getTotalInfoFromTrees,\n    speciesFreq,\n    mostCommonSpecies,\n    composeChart\n} from '../data/cardFunctions'\nimport BenefitGrid from './benefitGrid'\nimport { BsFillArrowLeftSquareFill } from 'react-icons/bs'\n\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport Select from '@mui/material/Select';\nimport Checkbox from '@mui/material/Checkbox';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nconst names = [\n    'Oliver Hansen',\n    'Van Henry',\n    'April Tucker',\n    'Ralph Hubbard',\n    'Omar Alexander',\n    'Carlos Abbott',\n    'Miriam Wagner',\n    'Bradley Wilkerson',\n    'Virginia Andrews',\n    'Kelly Snyder',\n];\n\nconst theme = createTheme({\n    palette: {\n        mode: \"light\",\n        background: {\n            default: \"green\"\n        }\n    }\n});\n\nexport default function CardCirc(props) {\n    const [filterValue, setFilterValue] = useState([]);\n\n    const handleChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setFilterValue(\n            // On autofill we get a stringified value.\n            typeof value === 'string' ? value.split(',') : value,\n        );\n    };\n\n    var [treesCirc, setTreesCirc] = useState('')\n    var [totalInfoTrees, setTotalInfoTrees] = useState(null);\n    var [freq, setFreq] = useState('')\n    var [commonSpecies, setcommonSpecies] = useState('')\n    var [chart, setChart] = useState('')\n\n    useEffect(() => {\n        let treesInCirc = getTreesWithinCircoscrizione(props.propTrees, props.name, props.propCircoscrizioni).features\n        let freq = speciesFreq(treesInCirc)\n        let commonSpecies = mostCommonSpecies(freq)\n\n        if (filterValue.length > 0) {\n            treesInCirc = treesInCirc.filter((tree) => {\n                // check if the tree is in one of the selected species\n                return filterValue.includes(tree.properties.Name)\n            })\n        }\n        let totalInfo = getTotalInfoFromTrees(treesInCirc)\n\n        let chartData = []\n\n        commonSpecies.map((specie) => {\n            chartData.push({\n                name: specie,\n                amount: parseInt(freq[specie])\n            })\n        })\n\n        setChart(composeChart(chartData, (((Object.keys(treesInCirc)).length) - 1), Object.keys(freq).length))\n\n        setFreq(freq)\n        setcommonSpecies(commonSpecies)\n        setTreesCirc(treesInCirc)\n        setTotalInfoTrees(totalInfo)\n    }, [filterValue])\n\n    return (\n        // <ThemeProvider theme={theme}>\n        <Box sx={{ minWidth: 10 }} className=\"card\">\n            <Card variant=\"outlined\" sx={{ borderRadius: 5, backgroundColor: '#ffffffd0' }}>\n                <CardContent >\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justifyContent=\"flex-start\"\n                    >\n                        <Grid item xs='auto'>\n                            {props.drawerOpen ?\n                                <div style={{\n                                    position: \"relative\",\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    alignItems: \"center\",\n                                    justifyContent: \"center\",\n                                }}>\n                                    <BsFillArrowLeftSquareFill onClick={() => props.setDrawerOpen(false)} size={25} />\n                                </div> : null\n                            }\n                        </Grid>\n                        <Grid item xs='auto'>\n                            <Typography sx={{ textAlign: 'center', fontSize: 15 }} color=\"text.secondary\">\n                                Zone\n                            </Typography>\n                            <Typography sx={{ fontSize: 25, textAlign: 'center', color: '#1fe54d', fontWeight: 'bold' }}>\n                                {props.name}\n                            </Typography>\n                            <Typography sx={{ textAlign: 'center', fontSize: 15 }} color=\"text.secondary\">\n                                Trees\n                            </Typography>\n                            <Typography sx={{ fontSize: 23, textAlign: 'center', fontWeight: 'bold' }}>\n                                {treesCirc.length}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n            <Card variant=\"outlined\" sx={{ borderRadius: 5, backgroundColor: '#ffffffd0', marginTop: 1 }}>\n                <CardContent >\n                    {totalInfoTrees != null ? <BenefitGrid totalInfo={totalInfoTrees} /> : null}\n                </CardContent>\n            </Card>\n            <Card variant=\"outlined\" sx={{ borderRadius: 5, backgroundColor: '#ffffffd0', marginTop: 1 }}>\n                <CardContent >\n                    {chart}\n                </CardContent>\n            </Card>\n            {commonSpecies?.length > 0 && (\n                <Card variant=\"outlined\" sx={{ borderRadius: 5, backgroundColor: '#ffffffd0', marginTop: 1 }}>\n                    {/* add the filters, for the species */}\n                    <Typography sx={{ textAlign: 'center', fontSize: 15, marginTop: 1 }} color=\"text.secondary\">\n                        Select the species you want to see:\n                    </Typography>\n                    <FormControl sx={{ m: 1, width: 300 }}>\n                        <InputLabel id=\"demo-multiple-checkbox-label\">Tag</InputLabel>\n                        <Select\n                            labelId=\"demo-multiple-checkbox-label\"\n                            id=\"demo-multiple-checkbox\"\n                            multiple\n                            value={filterValue}\n                            onChange={handleChange}\n                            input={<OutlinedInput label=\"Tag\" />}\n                            renderValue={(selected) => selected.join(', ')}\n                            MenuProps={MenuProps}\n                        >\n                            {commonSpecies?.map((name) => (\n                                <MenuItem key={name} value={name}>\n                                    <Checkbox checked={filterValue.indexOf(name) > -1} />\n                                    <ListItemText primary={name} />\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Card>\n            )}\n        </Box>\n    );\n}","import { useRef, useEffect, useState } from 'react';\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport '../App.css';\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport Grid from '@mui/material/Grid';\nimport {\n    getTreesWithinPoloSociale,\n    getTotalInfoFromTrees,\n    speciesFreq,\n    mostCommonSpecies,\n    composeChart\n} from '../data/cardFunctions'\nimport BenefitGrid from './benefitGrid'\nimport {BsFillArrowLeftSquareFill} from 'react-icons/bs'\n\nexport default function CardPoli(props) {\n    var [treesPoli,setTreesPoli] = useState('')\n    var [totalInfoTrees,setTotalInfoTrees] = useState(null);\n    var [freq,setFreq] = useState('')\n    var [commonSpecies,setcommonSpecies] = useState('')\n    var [chart,setChart] = useState('')\n\n    useEffect(() => {\n        let treesInCirc = getTreesWithinPoloSociale(props.propTrees,props.name,props.propPoliSociali).features\n        let totalInfo = getTotalInfoFromTrees(treesInCirc)\n\n        let freq = speciesFreq(treesInCirc)\n        let commonSpecies = mostCommonSpecies(freq)\n\n        let chartData = []\n\n        commonSpecies.map((specie) => {\n            chartData.push({\n                name : specie,\n                amount : parseInt(freq[specie])\n            })\n        })\n        \n        setChart(composeChart(chartData,(((Object.keys(treesInCirc)).length)-1),Object.keys(freq).length))\n        \n        setFreq(freq)\n        setcommonSpecies(commonSpecies)\n\n        setTreesPoli(treesInCirc)\n        setTotalInfoTrees(totalInfo)\n    },[])\n\n    return (\n        // <ThemeProvider theme={theme}>\n        <Box sx={{ minWidth: 10}} className=\"card\">\n            <Card variant=\"outlined\" sx={{borderRadius: 5, backgroundColor: '#ffffffd0'}}>\n                <CardContent >\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justifyContent=\"flex-start\"\n                    >\n                        <Grid item xs='auto'>\n                            { props.drawerOpen ? \n                                <div style={{\n                                    position: \"relative\",\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    alignItems: \"center\",\n                                    justifyContent: \"center\",\n                                }}>\n                                    <BsFillArrowLeftSquareFill onClick={() => props.setDrawerOpen(false)} size={25}/>\n                                </div> : null\n                            }\n                        </Grid>\n                        <Grid item xs='auto'>\n                            <Typography sx={{textAlign : 'center', fontSize: 15 }} color=\"text.secondary\">\n                                Polo\n                            </Typography>\n                            <Typography sx={{ fontSize: 25, textAlign : 'center', color: '#1fe54d', fontWeight: 'bold' }}>\n                                {props.name}\n                            </Typography>\n                            <Typography sx={{textAlign : 'center', fontSize: 15 }} color=\"text.secondary\">\n                                Trees\n                            </Typography>\n                            <Typography sx={{ fontSize: 23, textAlign : 'center', fontWeight: 'bold' }}>\n                                {treesPoli.length}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </CardContent>    \n            </Card>\n            <Card variant=\"outlined\" sx={{borderRadius: 5, backgroundColor: '#ffffffd0', marginTop: 1}}>\n                <CardContent >\n                    {totalInfoTrees!=null ? <BenefitGrid totalInfo={totalInfoTrees}/> : null}\n                </CardContent>    \n            </Card>\n            <Card variant=\"outlined\" sx={{borderRadius: 5, backgroundColor: '#ffffffd0', marginTop: 1}}>\n                <CardContent >\n                    {chart}\n                </CardContent>    \n            </Card>\n        </Box>\n    );\n}","import { useRef, useEffect, useState } from 'react';\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport '../App.css';\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport * as turf from \"turf\";\nimport Grid from '@mui/material/Grid';\nimport {\n    getTotalInfoFromTrees,\n    speciesFreq,\n    mostCommonSpecies,\n    getTreesWithinPoligono,\n    composeChart\n} from '../data/cardFunctions'\nimport BenefitGrid from './benefitGrid'\nimport {BsFillArrowLeftSquareFill} from 'react-icons/bs'\n\n\nconst theme = createTheme({\n    palette: {\n        mode: \"light\",\n        background: {\n            default: \"green\"\n        }\n    }\n});\n\nexport default function CardPoligono(props) {\n    var [treesPoligono,setTreesPoligono] = useState('')\n    var [totalInfoTrees,setTotalInfoTrees] = useState(null);\n    var [freq,setFreq] = useState('')\n    var [commonSpecies,setcommonSpecies] = useState('')\n    var [chart,setChart] = useState('')\n\n    useEffect(() => {\n        let treesInPoligono = getTreesWithinPoligono(props.propTrees,props.info_poligono).features\n\n        /* if(props.filter != null){\n            treesInPoligono = treesInPoligono.filter((tree) => {\n                return tree.properties[props.filter] === props.value\n            })\n        } */\n\n        let totalInfo = getTotalInfoFromTrees(treesInPoligono)\n\n        let freq = speciesFreq(treesInPoligono)\n        let commonSpecies = mostCommonSpecies(freq)\n\n        let chartData = []\n\n        commonSpecies.map((specie) => {\n            chartData.push({\n                name : specie,\n                amount : parseInt(freq[specie])\n            })\n        })\n        \n        setChart(composeChart(chartData,(((Object.keys(treesInPoligono)).length)-1),Object.keys(freq).length))\n        \n        setFreq(freq)\n        setcommonSpecies(commonSpecies)\n        setTreesPoligono(treesInPoligono)\n        setTotalInfoTrees(totalInfo)\n    },[])\n\n    return (\n        // <ThemeProvider theme={theme}>\n        <Box sx={{ minWidth: 10}} className=\"card\">\n            <Card variant=\"outlined\" sx={{borderRadius: 5, backgroundColor: '#ffffffd0'}}>\n                <CardContent >\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justifyContent=\"flex-start\"\n                    >\n                        <Grid item xs='auto'>\n                            { props.drawerOpen ? \n                                <div style={{\n                                    position: \"relative\",\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    alignItems: \"center\",\n                                    justifyContent: \"center\",\n                                }}>\n                                    <BsFillArrowLeftSquareFill onClick={() => props.setDrawerOpen(false)} size={25}/>\n                                </div> : null\n                            }\n                        </Grid>\n                        <Grid item>\n                            <Typography sx={{ fontSize: 25, textAlign : 'center', color: '#1fe54d', fontWeight: 'bold' }}>\n                                Area\n                            </Typography>\n                        </Grid>\n                        <Grid item sx={{marginTop : 1}}>\n                            <Grid\n                                container\n                                display='flex'\n                                direction=\"row\"\n                                justifyContent=\"center\"\n                                alignItems=\"stretch\"\n                            >\n                                <Grid item >\n                                    <div style={{\n                                        position: \"relative\",\n                                        left: 0,\n                                        top: 0,\n                                        display: \"flex\",\n                                        flexDirection: \"column\",\n                                        alignItems: \"center\",\n                                        justifyContent: \"center\",\n                                    }}>\n                                        <Typography sx={{textAlign : 'center', fontSize: 15 }} color=\"text.secondary\">\n                                            Trees\n                                        </Typography>\n                                        <Typography sx={{ fontSize: 23, textAlign : 'center', fontWeight: 'bold' }}>\n                                            {treesPoligono.length}\n                                        </Typography>\n                                    </div>\n                                </Grid>\n                                <Divider orientation=\"vertical\" flexItem sx={{marginLeft : 1, marginRight : 1}}/>\n                                <Grid item>\n                                    <div style={{\n                                        position: \"relative\",\n                                        left: 0,\n                                        top: 0,\n                                        display: \"flex\",\n                                        flexDirection: \"column\",\n                                        alignItems: \"center\",\n                                        justifyContent: \"center\",\n                                    }}>\n                                        <Typography sx={{textAlign : 'center', fontSize: 15 }} color=\"text.secondary\">\n                                            Area\n                                        </Typography>\n                                        <Typography sx={{ fontSize: 22, textAlign : 'center', fontWeight: 'bold' }}>\n                                            {Math.round(turf.area(props.info_poligono) * 100) / 100 + ' m²'}\n                                        </Typography>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </CardContent>    \n            </Card>\n            {commonSpecies.length > 0 ?\n                <Card variant=\"outlined\" sx={{borderRadius: 5, backgroundColor: '#ffffffd0', marginTop: 1}}>\n                    <CardContent >\n                        {totalInfoTrees!=null ? <BenefitGrid totalInfo={totalInfoTrees}/> : null}\n                    </CardContent>    \n                </Card>\n            : null}\n            {commonSpecies.length > 0 ?\n                <Card variant=\"outlined\" sx={{borderRadius: 5, backgroundColor: '#ffffffd0', marginTop: 1}}>\n                    <CardContent >\n                        {chart}\n                    </CardContent>    \n                </Card>\n            : null}\n        </Box>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport Map from './components/map.js';\nimport CardCitta from \"./components/cardCitta\";\nimport CardAlbero from \"./components/cardAlbero\";\nimport CardCirc from \"./components/cardCirc\";\nimport CardPoli from \"./components/cardPoli\";\nimport CardPoligono from \"./components/cardPoligono\"\nimport './App.css';\nimport { Button, Link } from \"@mui/material\";\nimport {\n  fetchProps\n} from \"./data/mapFunctions\"\nimport { Drawer } from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\n\nimport SweetAlert2 from 'react-sweetalert2';\n\nimport pointsWithinPolygon from '@turf/points-within-polygon'\n\nimport { BsFillArrowRightSquareFill } from 'react-icons/bs'\nimport { AiFillGithub } from 'react-icons/ai'\nimport { IoIosPeople } from 'react-icons/io'\nimport { MdEmail } from 'react-icons/md'\n\nimport { CircleLoading } from 'react-loadingg';\n\n\nfunction App() {\n  const [cardInfo, setCardInfo] = useState({\n    name: 'citta',\n    item_name: null,\n    item_info: null\n  })\n\n  const [data, setData] = useState({\n    propTrees: null,\n    propCircoscrizioni: null,\n    propPoliSociali: null,\n    propPredictions: null,\n    totalInfoTrees: null\n  })\n\n  const [swalProps, setSwalProps] = useState({});\n  const [drawerOpen, setDrawer] = useState(true)\n\n\n  useEffect(() => {\n    //aspetto che vengano fetchati tutti i geojson necessari e li salvo nello stato (solo primo ciclo)\n    fetchProps().then((data) => {\n      let tempTrees = data[0]\n      let total = tempTrees.features.pop()\n\n      let date = Date.now()\n\n      /* data[1].features.map((item) => {\n        return item.properties.trees_within = pointsWithinPolygon(tempTrees, item).features.length\n      })\n\n      data[2].features.map((item) => {\n        return item.properties.trees_within = pointsWithinPolygon(tempTrees, item).features.length\n      }) */\n\n      let finishDate = Date.now()\n\n      console.log('finished processing poli and circ data in ' + (finishDate - date) / 1000 + ' seconds') \n\n      setData({\n        propTrees: data[0],\n        propCircoscrizioni: data[1],\n        propPoliSociali: data[2],\n        propPredictions: data[3],\n        totalInfoTrees: total.properties\n      })\n    })\n  }, [])\n\n  //fuinzione passata al componente figlio 'map', che cambia lo stato di app (questo component), che permette di capire quale layer si e' cliccato e le sue informazioni, e di conseguenza estrarne le informazioni. \n  function changeCardInfo(info) {\n    setCardInfo(info)\n  }\n\n  const onClick = () => {\n    setDrawer(!drawerOpen)\n  }\n\n  function showAbout() {\n    setSwalProps({\n      show: true,\n      didClose: () => {\n        setSwalProps({})\n      }\n    });\n  }\n\n\n  if (data.propTrees === null) {\n    return (\n      <div style={{ textAlign: 'center', position: \"fixed\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\" }}>\n        <CircleLoading />\n        <Typography sx={{ textAlign: 'center', fontSize: 17, marginTop: 10 }} color=\"text.secondary\">\n          The page is loading...\n        </Typography>\n      </div>\n    )\n  } else {\n    return (\n      <React.Fragment>\n        <Drawer\n          anchor='left'\n          open={drawerOpen}\n          // overflowY= 'scroll'\n          sx={{\n            position: \"relative\",\n            zIndex: 'initial',\n            overflowY: 'auto',\n            boxSizing: 'content-box',\n            '& .MuiDrawer-paper': {\n              scrollBehavior: 'smooth',\n              scrollbarWidth: 'none',\n              backgroundColor: '#fff0',\n              boxShadow: 'none',\n              //height: 'auto',\n            },\n          }}\n        >\n          {data.propTrees !== null && (\n            cardInfo.name === 'citta' ? <CardCitta drawerOpen={drawerOpen} setDrawerOpen={setDrawer} propTrees={data.propTrees} totalInfo={data.totalInfoTrees} /> :\n              cardInfo.name === 'poli' ? <CardPoli drawerOpen={drawerOpen} setDrawerOpen={setDrawer} name={cardInfo.item_name} propTrees={data.propTrees} propPoliSociali={data.propPoliSociali} /> :\n                cardInfo.name === 'circoscrizioni' ? <CardCirc drawerOpen={drawerOpen} setDrawerOpen={setDrawer} name={cardInfo.item_name} propTrees={data.propTrees} propCircoscrizioni={data.propCircoscrizioni} /> :\n                  cardInfo.name === 'albero' ? <CardAlbero drawerOpen={drawerOpen} setDrawerOpen={setDrawer} name={cardInfo.item_info.Name} propTree={cardInfo.item_info} /> :\n                    cardInfo.name === 'poligono' ? <CardPoligono drawerOpen={drawerOpen} setDrawerOpen={setDrawer} info_poligono={cardInfo.item_info.features[0]} propTrees={data.propTrees} /> : null\n          )\n          }\n        </Drawer>\n        \n        <Map setDrawer={setDrawer} setCardInfo={changeCardInfo} propTrees={data.propTrees} propCircoscrizioni={data.propCircoscrizioni} propPoliSociali={data.propPoliSociali} propPredictions={data.propPredictions} />\n\n        {drawerOpen ? null :\n          <div style={{\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            margin: 20,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}>\n            <BsFillArrowRightSquareFill onClick={onClick} size={30} />\n            <Typography sx={{ textAlign: 'center', fontSize: 17, fontWeight: 'bold' }} color=\"text.primary\">\n              Info\n            </Typography>\n          </div>\n        }\n        <Button variant=\"contained\" onClick={showAbout} startIcon={<IoIosPeople />}\n          sx={{\n            position: \"absolute\",\n            backgroundColor: '#42dd57b8',\n            \"&:hover\": {\n              backgroundColor: \"#30db47e6\",\n            },\n            right: 0,\n            bottom: 0,\n            margin: 1.5,\n          }}\n        >\n          About\n        </Button>\n        <SweetAlert2 {...swalProps}>\n          <Typography variant='h5'>\n            Tree Map of Bologna\n          </Typography>\n          <Divider flexItem sx={{ marginTop: 1 }} />\n          <Typography fontSize={14} marginTop={1}>\n            The map shows a part of the trees managed by the Municipality of Bologna.\n          </Typography>\n          <Typography fontSize={14} marginTop={1}>\n            The data are taken from the open data portal of the Municipality of Bologna and are updated to 2023.\n          </Typography>\n          <Typography fontSize={14} marginTop={1}>\n            The Eco-Benefit is calculated using the platform\n          </Typography>\n          <Typography fontSize={14} marginTop={1} color={'red'}>\n            Red dots are rappresenting the proposed trees to be planted and the potential ecobenefit that they could bring.\n          </Typography>\n          <Typography fontSize={16} fontWeight=\"bold\">\n            <Link target=\"_blank\" href=\"https://www.itreetools.org/tools/i-tree-eco\" underline=\"hover\">\n              i-Tree Eco\n            </Link>\n          </Typography>\n          <Typography fontSize={14} marginTop={1}>\n            The map was created by\n          </Typography>\n          <Typography fontSize={18} fontWeight=\"bold\" color='#0bff2a'>\n            Luca Maccacaro\n          </Typography>\n          <Typography fontSize={14}>\n            under the supervision of&nbsp;\n            <Link target=\"_blank\" href=\"https://twitter.com/napo\" underline=\"hover\">\n              Maurizio Napolitano\n            </Link>\n            &nbsp; during the thesis project at&nbsp;\n            <Link target=\"_blank\" href=\"https://www.unitn.it/\" underline=\"hover\">\n              Univestità degli Studi di Trento\n            </Link>\n            .\n          </Typography>\n          <Typography fontSize={14} marginTop={2}>\n            For details and contacts:\n          </Typography>\n          <Grid\n            container\n            direction=\"column\"\n            justifyContent=\"flex-start\"\n          >\n            <Grid item sx={{ marginTop: 1 }}>\n              <Grid\n                container\n                display='flex'\n                direction=\"row\"\n                justifyContent=\"center\"\n                alignItems=\"stretch\"\n              >\n                <Grid item >\n                  <div style={{\n                    position: \"relative\",\n                    left: 0,\n                    top: 0,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                  }}>\n                    <AiFillGithub size={25} />\n                    <Typography sx={{ textAlign: 'center', fontSize: 13 }} color=\"text.secondary\">\n                      Github\n                    </Typography>\n                    <Typography sx={{ fontSize: 15, textAlign: 'center' }}>\n                      <Link target=\"_blank\" href=\"https://github.com/DigitalCommonsLab/greenergroundsplanning\">\n                        Repository\n                      </Link>\n                    </Typography>\n                  </div>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Divider flexItem sx={{ marginTop: 1, marginRight: 10, marginLeft: 10 }} />\n            <Grid item sx={{ marginTop: 1 }}>\n              <div style={{\n                position: \"relative\",\n                left: 0,\n                top: 0,\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}>\n                <MdEmail size={25} />\n                <Typography sx={{ textAlign: 'center', fontSize: 13 }} color=\"text.secondary\">\n                  E-Mail\n                </Typography>\n                <Typography sx={{ fontSize: 16, textAlign: 'center' }}>\n                  <Link target=\"_blank\" href=\"mailto:luca.maccacaro@studenti.unitn.it\">\n                    luca.maccacaro@studenti.unitn.it\n                  </Link>\n                </Typography>\n              </div>\n            </Grid>\n          </Grid>\n          <Typography fontSize={14} marginTop={1}>\n            This software is released under the MIT license.\n          </Typography>\n        </SweetAlert2>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//import {data} from './data/variables'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-225868624-1');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}